/**
 * @file This file defines the API route handler for processing incoming webhooks
 * from the PayHero payment gateway. This endpoint is responsible for updating

 * order statuses and finalizing transactions upon successful payment notification.
 */

import { NextRequest, NextResponse } from 'next/server';
import connectDB from '@/lib/db';
import Order from '@/models/Order';
import User from '@/models/User';

/**
 * Defines the expected structure of the incoming webhook payload from PayHero.
 * This interface provides type safety and autocompletion when handling the webhook data.
 */
interface PayHeroPayload {
  /** A boolean indicating if the payment was successful. */
  paymentSuccess: boolean;
  /** The internal transaction reference generated by PayHero. */
  reference: string;
  /** The unique order identifier that we provided to PayHero (our `customId`). */
  user_reference: string;
  /** The payment method used (e.g., 'm-pesa'). */
  provider: string;
  /** The transaction code from the payment provider (e.g., M-Pesa code). */
  providerReference: string;
  /** The amount paid. */
  amount: number;
  /** The phone number used for the payment. */
  phone: string;
  /** The name of the customer as entered during payment. */
  customerName: string;
  /** The PayHero channel ID used for the transaction. */
  channel: string;
}

/**
 * Handles incoming POST requests from the PayHero webhook service.
 * It validates the payload, updates the corresponding order, and enriches user data.
 *
 * @param {NextRequest} request - The incoming HTTP request object.
 * @returns {Promise<NextResponse>} A promise that resolves to the API response.
 */
export async function POST(request: NextRequest) {
  // TODO: [Security] Implement a webhook signature verification mechanism. PayHero likely sends a
  // signature in the request headers. Verifying this signature is critical to ensure that
  // incoming requests are genuinely from PayHero and have not been tampered with.

  try {
    // Step 1: Parse the incoming request body.
    const payload: PayHeroPayload = await request.json();
    // TODO: [Observability] In a production environment, use a structured logging service
    // (e.g., Sentry, Axiom) instead of `console.log` for better monitoring and alerting.
    console.log('Received PayHero Webhook:', payload);

    // Step 2: Acknowledge non-successful payments immediately.
    // It's crucial to return a 200 OK to prevent PayHero from retrying the webhook
    // for failed, pending, or already-processed transactions.
    if (!payload.paymentSuccess) {
      return NextResponse.json(
        { message: 'Payment was not successful. No action taken.' },
        { status: 200 }
      );
    }

    await connectDB();

    // Step 3: Find the corresponding order in the database using the `user_reference`.
    const order = await Order.findOne({ customId: payload.user_reference });

    if (!order) {
      // This is a critical error as the order should always exist for a valid payment.
      console.error(
        `Webhook Error: Order with customId ${payload.user_reference} not found.`
      );
      // Return a 404, as the referenced resource doesn't exist.
      return NextResponse.json({ error: 'Order not found' }, { status: 404 });
    }

    // Step 4: Idempotency check. If the order is already completed, do not process it again.
    if (order.status === 'Completed') {
      return NextResponse.json(
        { message: 'Order already marked as completed.' },
        { status: 200 }
      );
    }

    // Step 5: Update the order with payment details.
    order.status = 'Completed';
    order.paymentProvider = 'payhero';
    order.providerReference = payload.providerReference;
    await order.save();

    // Step 6: Optionally, enrich user data with the phone number from the payment.
    const user = await User.findById(order.user);
    if (user && !user.phone && payload.phone) {
      // Normalize the phone number to a standard international format.
      const normalizedPhone = payload.phone.startsWith('0')
        ? '254' + payload.phone.substring(1)
        : payload.phone;
      user.phone = normalizedPhone;
      await user.save();
      console.log(`Updated phone for user ${user._id} to ${normalizedPhone}`);
    }

    // TODO: [Robustness] Consider wrapping the database updates for Order and User in a
    // transaction to ensure that both operations succeed or fail together, maintaining data consistency.

    // TODO: [Feature] Trigger a post-payment side effect, such as sending a confirmation
    // email to the user with their order details and download links.

    // Step 7: Send a success response to PayHero to acknowledge successful processing.
    return NextResponse.json({ received: true }, { status: 200 });
  } catch (error: any) {
    console.error('Error processing PayHero webhook:', error);
    // Return a generic 500 error to avoid leaking implementation details.
    return NextResponse.json(
      { error: 'Webhook processing failed.' },
      { status: 500 }
    );
  }
}