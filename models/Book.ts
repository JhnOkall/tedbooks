/**
 * @file Defines the Mongoose schema and model for the "Book" collection.
 * This file is responsible for the data structure, validation, and database
 * interface for book entities in the application.
 */

import mongoose, { Schema, Document, Model, Types } from 'mongoose';

/**
 * Represents a book document as stored in the MongoDB collection.
 * Includes all properties of a book and Mongoose document extensions.
 */
export interface IBook extends Document {
  /**
   * The unique identifier for the book document, generated by MongoDB.
   */
  _id: Types.ObjectId;

  /**
   * The title of the book.
   */
  title: string;

  /**
   * The author of the book.
   */
  author: string;

  /**
   * The purchase price of the book.
   */
  price: number;

  filePublicId: string;

  /**
   * A short description or summary, suitable for display in list or card views.
   */
  description: string;

  /**
   * A more detailed synopsis of the book, intended for the product detail page.
   */
  synopsis: string;

  /**
   * The category or genre of the book.
   */
  // TODO: Refactor the 'category' field to use a String enum to ensure data consistency
  // and prevent typos (e.g., ['Fiction', 'Non-Fiction', 'Science-Fiction']).
  category: string;

  /**
   * The URL for the book's cover image.
   */
  coverImage: string;

  /**
   * The URL pointing to the downloadable file for the e-book.
   */
  // TODO: Storing a direct, static file URL is insecure. Implement a system to generate
  // secure, time-limited, or pre-signed download URLs on-demand upon purchase.
  fileUrl: string;

  /**
   * A boolean flag to indicate if the book should be featured on promotional sections.
   * @default false
   */
  featured?: boolean;

  /**
   * Timestamp indicating when the document was created. Automatically managed by Mongoose.
   */
  createdAt: Date;

  /**
   * Timestamp indicating when the document was last updated. Automatically managed by Mongoose.
   */
  updatedAt: Date;
}

/**
 * Defines the schema for the Book model, specifying data types, validation rules,
 * and other constraints for book documents.
 */
const BookSchema: Schema<IBook> = new Schema(
  {
    title: {
      type: String,
      required: [true, 'Title is required.'],
      trim: true,
    },
    author: {
      type: String,
      required: [true, 'Author is required.'],
      trim: true,
    },
    price: {
      type: Number,
      required: [true, 'Price is required.'],
      min: [0, 'Price cannot be negative.'],
    },
    filePublicId: { type: String, required: true },
    description: {
      type: String,
      required: [true, 'Description is required.'],
    },
    synopsis: {
      type: String,
      required: [true, 'Synopsis is required.'],
    },
    category: {
      type: String,
      required: [true, 'Category is required.'],
    },
    coverImage: {
      type: String,
      required: [true, 'Cover image URL is required.'],
    },
    fileUrl: {
      type: String,
      required: [true, 'File URL is required.'],
    },
    featured: {
      type: Boolean,
      default: false,
    },
  },
  {
    /**
     * Automatically adds `createdAt` and `updatedAt` timestamp fields to the schema.
     */
    timestamps: true,
  }
);

// TODO: Add database indexes to fields that are frequently queried, such as 'title',
// 'author', and 'category', to improve search and filter performance.
// Example: BookSchema.index({ title: 'text', author: 'text' });

/**
 * The Mongoose model for the "Book" collection.
 * This logic prevents model recompilation in serverless environments or during
 * Next.js Hot Module Replacement (HMR) by reusing the existing model if it has
 * already been compiled.
 */
const Book: Model<IBook> =
  mongoose.models.Book || mongoose.model<IBook>('Book', BookSchema);

export default Book;