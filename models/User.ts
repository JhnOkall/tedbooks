/**
 * @file Defines the Mongoose schema and model for the "User" collection.
 * This model is central to user authentication, authorization, and profile management
 * within the application.
 */

import mongoose, { Schema, Document, Model, Types } from 'mongoose';

/**
 * Represents a user document as stored in the MongoDB collection.
 * Includes all properties of a user and Mongoose document extensions.
 */
export interface IUser extends Document {
  /**
   * The unique identifier for the user document, generated by MongoDB.
   */
  _id: Types.ObjectId;

  /**
   * The user's full name.
   */
  name: string;

  /**
   * The user's email address. It is unique and used for login and communication.
   */
  email: string;

  /**
   * A timestamp indicating when the user's email address was verified.
   * A value of `null` or `undefined` means the email is not yet verified.
   */
  emailVerified?: Date | null;

  /**
   * The URL for the user's profile picture or avatar.
   */
  image: string;

  /**
   * The user's phone number. This field is optional.
   */
  phone?: string;

  /**
   * The role assigned to the user, which determines their access level and permissions.
   */
  role: 'user' | 'admin';

  /**
   * Timestamp indicating when the user account was created. Automatically managed by Mongoose.
   */
  createdAt: Date;

  /**
   * Timestamp indicating when the user account was last updated. Automatically managed by Mongoose.
   */
  updatedAt: Date;
}

/**
 * Defines the schema for the User model, specifying data types, validation rules,
 * and other constraints for user documents.
 */
const UserSchema: Schema<IUser> = new Schema(
  {
    name: {
      type: String,
      required: [true, 'Name is required.'],
      trim: true,
    },
    email: {
      type: String,
      required: [true, 'Email is required.'],
      unique: true, // Ensures email addresses are unique across all users.
      lowercase: true, // Converts email to lowercase before saving to prevent duplicates.
      trim: true,
      match: [/\S+@\S+\.\S+/, 'Please provide a valid email address.'],
    },
    emailVerified: {
      type: Date,
      default: null,
    },
    image: {
      type: String,
    },
    phone: {
      type: String,
      // TODO: Add a validation regex for phone numbers to ensure a consistent format.
    },
    role: {
      type: String,
      enum: {
        values: ['user', 'admin'],
        message: 'Role must be either "user" or "admin".',
      },
      default: 'user',
      required: true,
      // TODO: Centralize the role strings ('user', 'admin') into a shared constant or enum
      // to ensure consistency across different parts of the application (e.g., models, auth callbacks).
    },
  },
  {
    /**
     * Automatically adds `createdAt` and `updatedAt` timestamp fields to the schema.
     */
    timestamps: true,
  }
);

/**
 * The Mongoose model for the "User" collection.
 * This logic prevents model recompilation in serverless environments or during
 * Next.js Hot Module Replacement (HMR) by reusing the existing model if it has
 * already been compiled.
 */
const User: Model<IUser> =
  mongoose.models.User || mongoose.model<IUser>('User', UserSchema);

export default User;